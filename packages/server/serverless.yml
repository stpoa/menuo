service:
  name: menuo
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  client:
    bucketName: ${env:SLS_BUCKET_NAME}
    distributionFolder: ../client/build

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-finch

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:*'
      Resource: '*'

functions:
  get_restaurant_orders:
    handler: src/restaurant/handlers/get-restaurant-orders.handler
    events:
      - http:
          path: restaurants/{restaurant}/orders
          method: get
          cors: true
          authorizer:
            name: verify_token
            type: token
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 0
          request:
            parameters:
              paths:
                restaurant: true

  post_restaurant_orders:
    handler: src/restaurant/handlers/post-restaurant-orders.handler
    events:
      - http:
          path: restaurants/{restaurant}/orders
          method: post
          cors: true
          request:
            parameters:
              paths:
                restaurant: true

  delete_restaurant_order:
    handler: src/restaurant/handlers/delete-restaurant-order.handler
    events:
      - http:
          path: restaurants/{restaurant}/orders/{order}
          method: delete
          cors: true
          authorizer:
            name: verify_token
            type: token
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 0
          request:
            parameters:
              paths:
                restaurant: true
                order: true

  delete_restaurant_orders:
    handler: src/restaurant/handlers/delete-restaurant-orders.handler
    events:
      - http:
          path: restaurants/{restaurant}/orders
          method: delete
          cors: true
          authorizer:
            name: verify_token
            type: token
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 0
          request:
            parameters:
              paths:
                restaurant: true
              querystrings:
                table: true
                tablestatus: true

  put_restaurant_orders:
    handler: src/restaurant/handlers/put-restaurant-orders.handler
    events:
      - http:
          path: restaurants/{restaurant}/orders/{order}
          method: put
          cors: true
          authorizer:
            name: verify_token
            type: token
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 0
          request:
            parameters:
              paths:
                restaurant: true
                order: true

  verify_token:
    handler: src/handlers.verifyToken

  login:
    handler: src/handlers.loginWaiter
    events:
      - http:
          path: restaurants/{restaurant}/login
          method: post
          cors: true
          request:
            parameters:
              paths:
                restaurant: true

  register:
    handler: src/handlers.registerWaiter
    events:
      - http:
          path: restaurants/{restaurant}/register
          method: post
          cors: true
          request:
            parameters:
              paths:
                restaurant: true

  me:
    handler: src/handlers.me
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer:
            name: verify_token
            type: token
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 0

  get_restaurant_user_tables:
    handler: src/restaurant/handlers/get-restaurant-user-tables.handler
    events:
      - http:
          path: restaurants/{restaurant}/my-tables
          method: get
          cors: true
          authorizer:
            name: verify_token
            type: token
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 0
          request:
            parameters:
              paths:
                restaurant: true

  put_restaurant_user_tables:
    handler: src/restaurant/handlers/put-restaurant-user-tables.handler
    events:
      - http:
          path: restaurants/{restaurant}/my-tables
          method: put
          cors: true
          authorizer:
            name: verify_token
            type: token
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 0
          request:
            parameters:
              paths:
                restaurant: true

  send_notifications:
    handler: src/handlers.sendNotifications

  # logs:
  #   handler: src/logs/handlers/log.handler
  #   events:
  #     - cloudwatchLog: '/aws/lambda/menuo-dev-get-restaurant' # FIXME: hardcoded

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
